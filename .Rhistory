ylab = "FREQUENCY",
las=1)
hist(animals$Weight,
col = "gray80",
main = "Histogram of animal weight",
xlab = "Animal weight",
ylab = "FREQUENCY",
las=1)
hist(animals$Weight,
col = "gray20",
main = "Histogram of animal weight",
xlab = "Animal weight",
ylab = "FREQUENCY",
las=1)
hist(animals$Weight,
col = "gray80",
main = "Histogram of animal weight",
xlab = "Animal weight",
ylab = "FREQUENCY",
las=1)
boxplot(animals$Height ~ animals$Type)
boxplot(animals$Height ~ animals$Type,
col=c("aquamarine", "goldenrod", "salmon"),
main="Animal boxplots",
xlab="Type", ylab="Height",
las=1)
library(ggplot2)
?ggplot2
data(iris)
ggplot(data = iris, aes(x = Petal.Length))
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram()
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(fill = "blue", bins = 10) +
theme_bw() +
ggtitle("This is a ggplot histogram")
# guides(fill = FALSE)
```
cooasdf
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_minimal() +
ylab("Petal Length (cm)") +
ggtitle("This are ggplot boxplots") # +
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width, color = Species, shape = Species)) +
geom_point(size = 10, alpha = 0.5) +
theme_classic() +
ggtitle("This is a ggplot scatterplot") +
theme(legend.position = "top") +
xlab("Petal Length (cm)") +
ylab("Petal Width (cm)")
data(iris)
setosa <- iris[iris$Species == "setosa",]
versicolor <- iris[iris$Species == "versicolor",]
virginica <- iris[iris$Species == "virginica",]
setosa
versicolor
virginica
setosa <- iris[iris$Species == "setosa",]
versicolor <- iris[iris$Species == "versicolor",]
virginica <- iris[iris$Species == "virginica",]
t.test(iris$versicolor, iris$virginica)
data(iris)
setosa <- iris[iris$Species == "setosa",]
versicolor <- iris[iris$Species == "versicolor",]
virginica <- iris[iris$Species == "virginica",]
setosa
versicolor
virginica
t.test(iris$versicolor, iris$virginica)
t.test(versicolor$Petal.Length, virginica$Petal.Length)
TukeyHSD(aov1)
aov1 <- aov(Petal.Length ~ Species, data = iris)
#Use `summary()` to access the useful information from our `aov1` model:
summary(aov1)
cor.test(iris$Petal.Length, iris$Sepal.Length)
lin_model1 <- lm(Petal.Length ~ Sepal.Width, data = iris)
summary(lin_model1)
names(lin_model1)
lin_model1$residuals
hist(lin_model1$residuals)
hist(lin_model1$residuals, col = "green4")
hist(lin_model1$residuals, col = "green5")
hist(lin_model1$residuals, col = "green1")
hist(lin_model1$residuals, col = "green")
hist(lin_model1$residuals, col = "green2")
hist(lin_model1$residuals, col = "green3")
hist(lin_model1$residuals, col = "lightgreen")
animals <- read.csv("./data/animals.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = c(" ", "999"))
animals
str(animals)
# relative file path
animals <- read.csv("./data/animals.csv",
header=TRUE,
stringsAsFactors=FALSE,
na.strings = c(" ", 999))
animals
# . means "current folder"
# .. means "folder above"
```
# or with "absolute" file path:
animals <- read.csv("/Users/evanmuzzall/Desktop/R-Fundamentals/data/animals.csv",
header=TRUE,
stringsAsFactors = FALSE,
na.strings = c(" ", 999))
# or with "absolute" file path:
animals <- read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/animals.csv",
header=TRUE,
stringsAsFactors = FALSE,
na.strings = c(" ", 999))
animals
sleep_VIM = read.csv("/Users/evanmuzzall/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
sleep_VIM
nrow(sleep_VIM)   # number of rows
rownames(sleep_VIM)   #row names (they have not been named and default to character type)
# for example:
class(rownames(sleep_VIM))
nrow(sleep_VIM)   # number of rows
ncol(sleep_VIM)   # number of columns
unique(sleep_VIM)   # show rows with unique data
head(sleep_VIM, n = 10) # show the first "n" rows
tail(sleep_VIM, n = 4) # show the last "n" rows
sleep_VIM$Dream #Returns only the "Dream" vector from the `sleep_VIM` data frame.
sleep_varnames <- sleep_VIM[ ,c("BodyWgt", "BrainWgt")]
str(sleep_varnames)
head(sleep_varnames)
# compare this to "sleep_VIM", which remains unchanged!
sleep_VIM
str(sleep_VIM)
sleep_posint <- sleep_VIM[ ,c(3,5,9)] # why does our vector go after the comma?
str(sleep_posint)
head(sleep_posint)
str(sleep_VIM)
sleep_negint_VIM <- sleep_VIM[,-c(1,2)]
str(sleep_negint_VIM)
head(sleep_negint_VIM)
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 5, ] # why is the comma included?
sleep_logical
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) & sleep_VIM$Danger == 2, ] # see how we are still just subsetting rows???
sleep_logical_and
sleep_logical_or <- sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and)
dim(sleep_logical_or)
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) & sleep_VIM$Danger == 2, ] # see how we are still just subsetting rows???
sleep_logical_and
sleep_logical_or <- sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and)
dim(sleep_logical_or)
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) & sleep_VIM$Danger == 2, ] # see how we are still just subsetting rows???
sleep_logical_and
dim(sleep_logical_and)
sleep_logical_or <- sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and)
dim(sleep_logical_or)
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == c(1,3) | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and)
dim(sleep_logical_or)
sleep_numeric_character <- sleep_VIM[sleep_VIM$Exp == c(2,3), c("BodyWgt", "BrainWgt", "Exp")]
sleep_numeric_character
sleep_numeric_character <- sleep_VIM[sleep_VIM$Exp == c(2), c("BodyWgt", "BrainWgt", "Exp")]
sleep_numeric_character
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1) & sleep_VIM$Danger == 2, ]
sleep_logical_and
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == c(1,3) & sleep_VIM$Danger == 2, ]
sleep_logical_and
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1& sleep_VIM$Danger == 2, ]
sleep_logical_and
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and) # 4 x 10
dim(sleep_logical_or) # 26 x 10
example_list <- list(TRUE, "string data", 5)
example_list
example_list[1]
example_list[[1]]
s_VIM <- sleep_VIM
s_VIM[is.na(s_VIM)] <- "NONE"
s_VIM
s_VIM <- sleep_VIM
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
# relative file path
animals <- read.csv("./data/animals.csv",
header=TRUE,
stringsAsFactors=FALSE,
na.strings = c(" ", 999))
animals
# . means "current folder"
# .. means "folder above"
# Chunk 5
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
sleep_VIM
# Chunk 7
names(sleep_VIM)
colnames(sleep_VIM)
# Chunk 9
sleep_VIM$Dream #Returns only the "Dream" vector from the `sleep_VIM` data frame.
# Chunk 11
sleep_varnames <- sleep_VIM[ ,c("BodyWgt", "BrainWgt")]
str(sleep_varnames)
head(sleep_varnames)
# compare this to "sleep_VIM", which remains unchanged!
sleep_VIM
# Chunk 13
str(sleep_VIM)
sleep_negint_VIM <- sleep_VIM[,-c(1,2)]
str(sleep_negint_VIM)
head(sleep_negint_VIM)
# Chunk 15
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
# Chunk 17
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and) # 5 rows x 10 columns
dim(sleep_logical_or) # 36 rows x 10 columns
# Chunk 19
example_list <- list(TRUE, "string data", 5)
example_list
# Chunk 20
example_list[1]
# Chunk 21
example_list[[1]]
# Chunk 23
mean(sleep_VIM$NonD)    # This returns NA because R is unsure how to deal with NA cells for the `mean()` computation.
# Chunk 25
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
sleep_VIM$NonD
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
# relative file path
animals <- read.csv("./data/animals.csv",
header=TRUE,
stringsAsFactors=FALSE,
na.strings = NA)
animals
# . means "current folder"
# .. means "folder above"
# Chunk 5
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
sleep_VIM
# Chunk 7
names(sleep_VIM)
colnames(sleep_VIM)
# Chunk 9
sleep_VIM$Dream #Returns only the "Dream" vector from the `sleep_VIM` data frame.
# Chunk 11
sleep_varnames <- sleep_VIM[ ,c("BodyWgt", "BrainWgt")]
str(sleep_varnames)
head(sleep_varnames)
# compare this to "sleep_VIM", which remains unchanged!
sleep_VIM
# Chunk 13
str(sleep_VIM)
sleep_negint_VIM <- sleep_VIM[,-c(1,2)]
str(sleep_negint_VIM)
head(sleep_negint_VIM)
# Chunk 15
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
# Chunk 17
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and) # 5 rows x 10 columns
dim(sleep_logical_or) # 36 rows x 10 columns
# Chunk 19
example_list <- list(TRUE, "string data", 5)
example_list
# Chunk 20
example_list[1]
# Chunk 21
example_list[[1]]
# Chunk 23
mean(sleep_VIM$NonD) # This returns NA because R is unsure how to deal with NA cells for the `mean` computation.
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
sleep_VIM$NonD
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
# relative file path
animals <- read.csv("./data/animals.csv",
header=TRUE,
stringsAsFactors=FALSE)
animals
# . means "current folder"
# .. means "folder above"
# Chunk 5
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
sleep_VIM
# Chunk 7
names(sleep_VIM)
colnames(sleep_VIM)
# Chunk 9
sleep_VIM$Dream #Returns only the "Dream" vector from the `sleep_VIM` data frame.
# Chunk 11
sleep_varnames <- sleep_VIM[ ,c("BodyWgt", "BrainWgt")]
str(sleep_varnames)
head(sleep_varnames)
# compare this to "sleep_VIM", which remains unchanged!
sleep_VIM
# Chunk 13
str(sleep_VIM)
sleep_negint_VIM <- sleep_VIM[,-c(1,2)]
str(sleep_negint_VIM)
head(sleep_negint_VIM)
# Chunk 15
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
# Chunk 17
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and) # 5 rows x 10 columns
dim(sleep_logical_or) # 36 rows x 10 columns
# Chunk 19
example_list <- list(TRUE, "string data", 5)
example_list
# Chunk 20
example_list[1]
# Chunk 21
example_list[[1]]
# Chunk 23
mean(sleep_VIM$NonD) # This returns NA because R is unsure how to deal with NA cells for the `mean` computation.
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
animals <- read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/animals.csv",
header=TRUE,
stringsAsFactors = FALSE)
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
# relative file path
animals <- read.csv("./data/animals.csv",
header=TRUE,
stringsAsFactors=FALSE)
animals
# . means "current folder"
# .. means "folder above"
# Chunk 5
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F)
sleep_VIM
# Chunk 7
names(sleep_VIM)
colnames(sleep_VIM)
# Chunk 9
sleep_VIM$Dream #Returns only the "Dream" vector from the `sleep_VIM` data frame.
# Chunk 11
sleep_varnames <- sleep_VIM[ ,c("BodyWgt", "BrainWgt")]
str(sleep_varnames)
head(sleep_varnames)
# compare this to "sleep_VIM", which remains unchanged!
sleep_VIM
# Chunk 13
str(sleep_VIM)
sleep_negint_VIM <- sleep_VIM[,-c(1,2)]
str(sleep_negint_VIM)
head(sleep_negint_VIM)
# Chunk 15
sleep_logical <- sleep_VIM[sleep_VIM$Exp == 4, ] # why is the comma included?
sleep_logical
# Chunk 17
# & (and) = all conditions must be TRUE
sleep_logical_and <- sleep_VIM[sleep_VIM$Exp == 1 & sleep_VIM$Danger == 2, ]
sleep_logical_and
# | (or) = just one of the conditions must be TRUE
sleep_logical_or <- sleep_VIM[sleep_VIM$Exp == 1 | sleep_VIM$Danger == 2, ]
sleep_logical_or
dim(sleep_logical_and) # 5 rows x 10 columns
dim(sleep_logical_or) # 36 rows x 10 columns
# Chunk 19
example_list <- list(TRUE, "string data", 5)
example_list
# Chunk 20
example_list[1]
# Chunk 21
example_list[[1]]
# Chunk 23
mean(sleep_VIM$NonD) # This returns NA because R is unsure how to deal with NA cells for the `mean` computation.
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
sleep_VIM = read.csv("/Users/evan.admin/Desktop/R-Fundamentals/data/sleep_VIM.csv", header = T, stringsAsFactors = F, na.strings = c(" "))asdf
mean(sleep_VIM$NonD, na.rm = TRUE) #Now `mean()` returns the mean!
s_VIM <- sleep_VIM
s_VIM[is.na(s_VIM)] <- "NONE"
s_VIM
s_VIM
s_VIM[s_VIM == "NONE"] <- NA
s_VIM
s_complete <- sleep_VIM[complete.cases(sleep_VIM),]
s_complete
is.na(s_complete)
sum(is.na(s_complete))
s_NA <- sleep_VIM[!complete.cases(sleep_VIM),]
s_NA <- sleep_VIM[!complete.cases(sleep_VIM),]
s_NA # All rows have at least one cell with missing data
sum(is.na(s_NA)) # Now we see TRUE values where data is missing
sum(is.na(s_NA)) == sum(is.na(sleep_VIM))
# subset rows where "BrainWgt" is less than 60 and "Danger" equals 4:
subset_1 <- subset(sleep_VIM, BrainWgt < 60 & Danger == 4)
subset_1
# subset rows where "BrainWgt" is less than 60 and "Danger" equals 4:
subset_1 <- subset(sleep_VIM, BrainWgt < 60 & Danger == 4 & Exp == 3)
subset_1
# subset rows where "BrainWgt" is less than 5 and "Danger" equals 4 and "Exp" equals 3:
subset_1 <- subset(sleep_VIM, BrainWgt < 60 & Danger == 4 & Exp == 3)
subset_1
# subset rows where BrainWgt is less than 100 or Danter equals 4 along with the "BrainWgt", "Danger", and "Exp" columns:
subset_2 <- subset(sleep_VIM, BrainWgt < 100 | Danger == 4, select=c(BrainWgt, Danger, Exp))
subset_2
df1 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
df1
df2 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
Science=c(99, 100, 99, 100),
Music=c(19, 18, 20, 20),
Art=c(20, 20, 19, 18))
df2
df_merge <- merge(df1, df2, by="Name")
df_merge
#What happened here?
df1
df3 <- data.frame(Name=c("Heather", "Billy", "Hector", "Jane"),
City=c("San Francisco", "Los Angeles", "San Francisco", "Chico"),
Math=c(49, 44),
Reading=c(10,10))
df3
df_cbind <- cbind(df1, df3)
df_cbind
df1
df3 <- data.frame(Name=c("Heather", "Billy", "Hector", "Jane"),
City=c("San Francisco", "Los Angeles", "San Francisco", "Chico"),
Math=c(49, 44),
Reading=c(10,10))
df3
df_cbind <- cbind(df1, df3)
df_cbind
df1
dfB <- data.frame(Name=c("James", "Cher", "Elizabeth", "Barack"),
City=c("Cleveland", "Memphis", "Detroit", "Chicago"),
Math=c(44, 49, 50, 49),
Reading=c(9, 9, 9, 10))
df_rbind <- rbind(df1, dfB)
df_rbind
data(mtcars)
new_cars <- mtcars[order(mtcars$cyl, -mtcars$mpg),]
new_cars
mat1 <- matrix(1:10, nrow=5, ncol=2)
mat1
mat1_t <- t(mat1)
mat1_t
animals_t <- t(animals)
animals_t
library(reshape2)
library(reshape2)
iris_melt <- melt(iris, id = "Species")
str(iris_melt)
iris_melt
animals_melt <- melt(animals, id = "Type")
str(animals_melt)
iris_melt
animals_melt
type_means <- dcast(animals_melt, Type~variable, mean)
type_means
library(reshape2)
type_means <- dcast(animals_melt, Type~variable, mean)
type_means
type_sd <- dcast(animals_melt, Type~variable, sd)
type_sd
