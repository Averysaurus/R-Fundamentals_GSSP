}
function(x){
x * 2.5 / 100
}
in_to_m <- function(x){
in_to_cm(x) / 100
}
in_to_m(74)
in_to_cm <- function(x){
x * 2.5
}
in_to_cm(74)
in_to_m <- function(x){
in_to_cm(x) / 100
}
in_to_m(74)
74 == c(74)
height.vec <- c(74,64,73,82)
in_to_m(height.vec)
Note this doesn't work with lists:
```{r, eval=FALSE}
height.list <- list(74,64,73,82)
in_to_m(height.list)
in_to_m(height.vec)
height.vec
in_to_m
in_to_m(height.list)
lapply(height.list, in_to_m)
?mean
?lapply
?sapply
sapply(sleep, mean)
sapply(sleep, mean, simplify=FALSE)
lapply(height.list, in_to_m)
lapply(height.list, in_to_m)
str(animals)
head(animals)
stats_tests <- function(x){
sum_aov <- summary(aov(Height ~ Name, data=animals))
Pearson <- cor.test(animals$Height, animals$Weight)
sum_lm <- summary(lin.mod <- lm(Height ~ Weight, data=animals))
box <- boxplot(Height ~ Name, data=animals, col=c(2,3,4))
stats_list <- list(sum_aov, Pearson, sum_lm, box)
names(stats_list)[1:4] <- c("ANOVA summary info", "Pearson correlation info", "Linear model summary info", "Boxplot info")
list(stats_list)
}
stats_tests(x)
stats_tests(x)[[1]][2]
stats_tests(x)
stats_tests(x)[[1]][2]
stats_tests(x)[[1]][3]
stats_tests(x)[[1]][2]
stats_tests(x)[[1]][3]
stats_test(x=animals$Height, y=animals$Weight, z=animals$Name, animals)
stats_tests(x=animals$Height, y=animals$Weight, z=animals$Name, animals)
stats_tests(x=animals$Height, y=animals$Weight, z=animals$Name, animals)[[1]][2]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
options(width=120)
# Chunk 3
mean(sleep[,2], na.rm=TRUE)
mean(sleep[,3], na.rm=TRUE)
mean(sleep[,4], na.rm=TRUE)
# Chunk 5
lapply(sleep, mean)
# Chunk 7
sapply(sleep, mean)
sapply(sleep, mean, simplify=FALSE)
# Chunk 8
lapply(sleep, mean(na.rm = TRUE))
# Chunk 9
getwd()
setwd("/Users/E/Desktop/R-Fundamentals-master")
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
# Chunk 11
mat <- c(rep(NA, 10))
mat
# Chunk 12
for(i in 1:10){
mat[i] <- 2^(i)
}
mat
# Chunk 13
for(i in 1:5){
mat[i] <- 3^i
}
mat
#This has changed only the first five entries of `mat`
# Chunk 14
animal.names <- c("Cat", "Dog", "Pig", "Elephant", "Giraffe")
animal.names
# Chunk 15
animals.length <- rep(NA, length(animal.names))
animals.length
# Chunk 16
names(animals.length) <- animal.names
animals.length  #See how we are building this from scratch?
# Chunk 17
?nchar
# Chunk 18
for(i in animal.names){
animals.length[i] <- nchar(i)
}
animals.length
# Chunk 23
x <- 7
if(x > 7){
print(x)
}else{   #`else` should not start its own line. Always let it be preceded by a closing brace on the same line.
print("NOT BIG ENOUGH!!")
}
# Chunk 24
x <- 1:10
for (i in 1:10){
if(x[i] > 7){
print(x[i])
}else{
print("NOT BIG ENOUGH!!")}
}
#Super cool! :)
# Chunk 26
set.seed(1)
animal <- sample(c("cat", "dog"), 10, replace=TRUE)
animal
# Chunk 27
animal <- ifelse(animal=="cat", 1, 0)
animal
# Chunk 28
animal <- ifelse(animal==1, "meow!?", "WOOF")
animal
# Chunk 29
animal <- ifelse(animal=="meow!?", TRUE, FALSE)
animal
# Chunk 31
test_function <- function(x){
x + 1
}
class(test_function)        # Returns the class of `test_function`
formals(test_function)      # Shows the defined arguments
body(test_function)         # Displays the statements to be evaluated
environment(test_function)  # Returns the "global" environment
test_function               # Shows your function as you have written it
# Chunk 32
test_function(2)
# Chunk 33
f <- function(x, y=3, z){
(x + y) / z
}
f(x = 1, z = 1) #here, we only specify `x` and `z` because `y` is held constant.
# Chunk 34
f(x = 2, y = 1, z = 10)
# Chunk 35
f <- function(x) {
y <- 1
g <- function (x) {
x + y
}
g(x)
}
f(1)
# Chunk 36
f <- function(x) {
if (x>5) {return("ERROR")}
y <- 4
g <- function (x) {
x + y
}
g(x)
}
f(x=1)
f(x=10)
# Chunk 37
in_to_cm <- function(x){
x * 2.5
}
in_to_cm(74)
#Evan is 185 cm tall (incorrectly assuming that 1 inch = 2.5 cm)
# Chunk 39
in_to_m <- function(x){
in_to_cm(x) / 100
}
in_to_m(74)
# Chunk 40
in_to_cm <- function(x){
x * 2.54
}
in_to_m(74)
#Evan is actually 1.8796 meters tall
# Chunk 41
74 == c(74)
# Chunk 42
height.vec <- c(74,64,73,82)
in_to_m(height.vec)
# Chunk 44
lapply(height.list, in_to_m)
# Chunk 45
str(animals)
head(animals)
# Chunk 46
stats_tests <- function(x){
sum_aov <- summary(aov(Height ~ Name, data=animals))
Pearson <- cor.test(animals$Height, animals$Weight)
sum_lm <- summary(lin.mod <- lm(Height ~ Weight, data=animals))
box <- boxplot(Height ~ Name, data=animals, col=c(2,3,4))
stats_list <- list(sum_aov, Pearson, sum_lm, box)
names(stats_list)[1:4] <- c("ANOVA summary info", "Pearson correlation info", "Linear model summary info", "Boxplot info")
list(stats_list)
}
# Chunk 47
stats_tests(x)
# Chunk 48
stats_tests(x)[[1]][2]
# Chunk 49
stats_tests(x)[[1]][3]
# Chunk 50
sample(1:6, 1)
# We can also use the sample function to simulate 100 die rolls...
sample(1:6, 100, replace=TRUE)
# Chunk 52
die_roll_mean <- function(nr_rolls){
rolls <- sample(1:6, nr_rolls, replace=TRUE)
mean(rolls)
}
die_roll_mean(nr_rolls = 100)
# Chunk 54
reps <- replicate(200, die_roll_mean(nr_rolls = 100))
# Chunk 56
reps <- replicate(200, die_roll_mean(nr_rolls = 5))
# Chunk 58
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
# Chunk 59
my_hist <- function(sims, n){
hist(sims, col="grey",  xlab="Mean of n die rolls",
main=paste0("n=",n), xlim=c(2,5))
abline(v=mean(sims), col="blue", lwd=2)
}
my_hist(sims=reps, n=5)
# Chunk 60
nr_die_rolls <- c(10, 25, 50, 100, 200, 500)
# Chunk 61
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
# Chunk 62
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
# Chunk 63
set.seed(94702)  #UC Berkeley zip code seed!
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
# Chunk 64
unique(birthdays)
length(unique(birthdays))
# Chunk 65
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
# Chunk 66
many_sims <- replicate(1000, birthday_function(people=25))
# Chunk 68
mean(many_sims)
# Chunk 69
people <- 4:100
sims <- matrix(NA, length(people), 2)
for(i in 1:length(people)){
many_sims <- replicate(5000, birthday_function(people=people[i]))
sims[i,] <- c(people[i], mean(many_sims))
}
head(sims)
par(mfrow=c(1,1))
plot(sims[,1], sims[,2], pch=16, col="blue",
xlab="Nr of People", ylab="Probability of at Least One Match")
set.seed(94702)  #UC Berkeley zip code seed!
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
unique(birthdays)
length(unique(birthdays))
set.seed(1)  #UC Berkeley zip code seed!
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
unique(birthdays)
length(unique(birthdays))
set.seed(94702)  #UC Berkeley zip code seed!
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
unique(birthdays)
length(unique(birthdays))
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
length(unique(people))
length(people)
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
people
people
birthday_function <- function(people=25){
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
set.seed(94702)  #UC Berkeley zip code seed!
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
```
unique(birthdays)
length(unique(birthdays))
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
length(people)
many_sims <- replicate(1000, birthday_function(people=25))
many_sims
mean(many_sims)
people <- 4:100
sims <- matrix(NA, length(people), 2)
for(i in 1:length(people)){
many_sims <- replicate(5000, birthday_function(people=people[i]))
sims[i,] <- c(people[i], mean(many_sims))
}
head(sims)
par(mfrow=c(1,1))
plot(sims[,1], sims[,2], pch=16, col="blue",
xlab="Nr of People", ylab="Probability of at Least One Match")
mean(sleep[,2], na.rm=TRUE)
mean(sleep[,3], na.rm=TRUE)
mean(sleep[,4], na.rm=TRUE)
mean(sleep[,2], na.rm=TRUE)
mean(sleep[,3], na.rm=TRUE)
mean(sleep[,4], na.rm=TRUE)
mean(sleep[2], na.rm=TRUE)
mean(sleep[,2], na.rm=TRUE)
?mean
lapply(sleep, mean(na.rm = TRUE))
sapply(sleep, mean, simplify=FALSE)
sapply(sleep, mean)
lapply(sleep, mean(na.rm = TRUE))
lapply(mean(sleep), na.rm = TRUE)
sapply(sleep, mean)
sapply(sleep, mean, simplify=FALSE)
height.list <- list(74,64,73,82)
in_to_m(height.list)
sleep
sleep
sleep$Dream #Returns only the "Dream" vector from the `sleep` data frame.
library(VIM)
sleep$Dream #Returns only the "Dream" vector from the `sleep` data frame.
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
head(animals)
# Chunk 6
summary(animals)
# or
summary(animals$Height)
# Chunk 7
library(psych)
# Chunk 9
str(animals)
describe(animals[,c(3:5)])
# Chunk 10
animals_describe <- describe(animals[,c(3:5)])
animals_describe
# Chunk 11
animals_simple <- animals_describe[c(5, 4, 11:13)]
animals_simple
# Chunk 14
#Output summary statistics by one grouping variable:
summary_sub <- describeBy(animals[,c(3:5)], animals$Type)
summary_sub
#If we just want to view Cats, Dogs, or Pigs, we can type:
summary_sub$Cat
summary_sub$Dog
summary_sub$Pig
#We can also view just the means for Dogs, we can type:
summary_sub$Dog[[3]] #Here, double bracket subsetting is used to return just the value from a list.
#If we just want the Height mean for Dogs (8.5), we can type:
summary_sub$Dog[[3]][2]
#Or the medians for Pigs:
summary_sub$Pig[[5]]
summary_sub$Pig[["median"]]
# Chunk 16
table(animals$Type) # get frequencies for Cat, Dog, and Pig
table(animals$Type, animals$Healthy) #get frequencies for Cat, Dog, and Pig by column "Healthy".
# Chunk 18
hist(animals$Weight, col="violetred")
# Chunk 20
hist(animals$Weight,
col="violetred",
main="Histogram of animal weight",
xlab="Animal weight",
las=1)
# Chunk 22
animals$Type <- factor(animals$Type)
str(animals)
# Chunk 24
plot(animals$Weight, animals$Height,
xlab="Weight (kg)",   # change x axis label
ylab="Height (cm)",   # change y axis label
main="Animal weights and heights",   # add plot title
las=1, # make all axis text parallel to x-axis
col=as.integer(animals$Type),   # change point colors to correspond to animal types
pch=as.integer(animals$Type),   # change point symbols to correspond to animal types
cex=2)   # change point size
# Chunk 25
plot(animals$Weight, animals$Height,
xlab="Weight (kg)",   # change x axis label
ylab="Height (cm)",   # change y axis label
main="Animal weights and heights",   # add plot title
las=1, # make all axis text parallel to x-axis
col=as.integer(animals$Type),   # change point colors to match animal types
pch=as.integer(animals$Type),   # change point symbols to match animal types
cex=2,   # change point size
xlim=c(3,8),  # adjust range of x axis
ylim=c(4,11))  # adjust range of y axis
# That looks better! We can also add a legend:
legend("topright", inset=.0, title="Animal", cex=1,
c("Cat","Dog","Pig"), col=c(1,2,3), pch=c(1,2,3),
horiz=FALSE)
# Chunk 29
boxplot(animals$Height ~ animals$Type)
# Chunk 30
boxplot(animals$Height ~ animals$Type,
col=c("aquamarine", "goldenrod", "salmon"),
las=1, main="Animal boxplots", xlab="Type", ylab="Height")
#That looks better!
# Chunk 33
Cat <- animals[animals$Type=="Cat",]
Cat
Dog <- animals[animals$Type=="Dog",]
Dog
Pig <- animals[animals$Type=="Pig",]
Pig
# Chunk 35
t.test(Cat$Height, Pig$Height)
# The p-value is 0.88 - we FAIL TO REJECT the null hypothesis (aka, there is no statistical difference between Cat and Pig means for Height). We accept the conditions of the null hypothesis that state there are no between-group differences.
# Chunk 36
t.test(Cat$Height, Dog$Height)
# p=0.39 so again we FAIL TO REJECT the null hypothesis
# Chunk 39
aov1 <- aov(Height ~ Type, data = animals)
#Use `summary()` to access the useful information from our `aov1` model:
summary(aov1)
# Chunk 40
TukeyHSD(aov1)
#This allows us to see mean Height differences bewteen the multiple comparisons animals.
# Chunk 42
cor.test(Cat$Height, Cat$Weight)
# Chunk 44
lin.model1 <- lm(Height ~ Weight, data=Cat)
summary(lin.model1)
# Chunk 45
names(lin.model1)
# Chunk 47
hist(lin.model1$residuals, col="skyblue") # residuals should be approximately normal when plotted
# Chunk 49
library(ggplot2)
mtcars$cyl <- factor(mtcars$cyl) # first, coerce "cyl" to factor data type
ggplot(mtcars, aes(x=cyl, y=mpg, fill=cyl)) +
geom_boxplot()
# Chunk 50
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
#theme_dark() +
#theme_classic() +
#theme_bw +
theme(legend.position="top")
getwd()
install.packages("IPSUR")
install.packages("IPSUR", type = "source")
install.packages("IPSUR", dependencies = T)
read(IPSUR)
lm1 <- lm(Sepal.Width ~ Species, data = iris)
summary(lm1)
t.test(iris$Sepal.Length, iris$Sepal.Width)
cor.test(iris$Sepal.Length, iris$Sepal.Width)
