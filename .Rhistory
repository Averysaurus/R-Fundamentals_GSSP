}
die_roll_mean(nr_rolls = 100)
# Chunk 34
# 100 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 100))
# Chunk 36
# 5 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 5))
# Chunk 38
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
# Chunk 39
my_hist <- function(sims, n){
hist(sims, col="grey",  xlab="Mean of n die rolls",
main=paste("n =",n))
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps, n=5)
# Chunk 40
nr_die_rolls <- c(10, 25, 50, 100, 200, 500)
# Chunk 41
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
# Chunk 42
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
par(mfrow=c(1,1))
# Chunk 43
set.seed(94705)
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
# Chunk 44
unique(birthdays)
length(unique(birthdays))
# Chunk 45
set.seed(94705)
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
# Chunk 46
set.seed(94705)
many_sims <- replicate(1000, birthday_function(people=25))
# Chunk 48
mean(many_sims)
# Chunk 49
people <- 2:100
sims <- matrix(NA, nrow = length(people), ncol = 2)
for(i in 1:length(people)){
many_sims <- replicate(5000, birthday_function(people=people[i]))
sims[i,] <- c(people[i], mean(many_sims))
}
head(sims)
sims
# Chunk 51
par(mfrow=c(1,1))
plot(x = sims[,1], y = sims[,2],
pch=16, col="blue",
xlab="Nr of People",
ylab="Probability of at Least One Match")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
data(iris)
dim(iris)[1L]
nrow(iris)
dim(iris)[1L] == nrow(iris)
# Chunk 4
nrow_function <- function(x){
dim(x)[1L]
}
nrow_function(iris)
# Chunk 5
for(x in 1:10){
print(x)
}
# ?reserved
# Chunk 6
vec <- c(rep(NA, 10))
vec
# Chunk 7
for(i in 1:10){
vec[i] <- 2^(i)
}  # does indentation matter?
vec
class(vec)
# Chunk 8
for(i in 1:5){
vec[i] <- 3^i
}
vec
#This has changed only the first five entries of `vec`
# Chunk 9
animal.names <- c("Cat", "Dog", "Pig", "Elephant", "Giraffe")
animal.names
# Chunk 10
animals.length <- rep(NA, length(animal.names))
animals.length
# Chunk 11
names(animals.length) <- animal.names
animals.length  #See how we are building this from scratch?
# Chunk 12
for(i in animal.names){
animals.length[i] <- nchar(i)
}
animals.length
# Chunk 14
for(x in 1:10){
if(x < 5)
print(x)
}
# Chunk 15
for (time in c(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)){
print(paste("The time is", time, "AM"))
}
for(i in 1:10){
print(i / 12)
}
# your code here
# Chunk 18
x <- 1:10
for (x in 1:length(x)){
if(x > 7){
print(x)
}else{
print("Error: number not big enough to print. x must be greater than 7")
}
}
#Super cool! :)
# Chunk 19
set.seed(1)
animal <- sample(c("cat", "dog"), 10, replace=TRUE)
animal
# Chunk 20
animal_sound <- ifelse(animal == "cat", "meow?", "WOOF!")
animal_sound
# Chunk 21
animals_int <- ifelse(animal_sound == "WOOF!", 0, 1)
animals_int
# Chunk 22
animal2 <- ifelse(animals_int == 1, "cat", "dog")
animal2
animal == animal2 # sanity checks
sum(animal != animal2)
# Chunk 23
# 1.
for(i in 1:12) # what happened to the curly braces?
if(i < 10){
print(paste("The time is", i, "o'clock"))
}else{
print("It is getting late!")
}
for(x in c(2,4,6,8,10,12))
if(x < 8){
print(paste("Whoa the number is", x))
}else{
print("nahhh...")
}
# your code here
# Chunk 24
test_function <- function(x){
x ^ 2
}
class(test_function)        # Returns the class of `test_function`
formals(test_function)      # Shows the defined arguments
body(test_function)         # Displays the statements to be evaluated
environment(test_function)  # Returns the "global" environment
test_function               # Shows your function as you have written it
# Chunk 25
test_function
test_function(2)
test_function(1:10) # is this the same as c(1:10) ^ 2?
# Chunk 26
f <- function(x, y=2){
(x + y) / y
}
f(x=5)
f(x=5, y=10)
# Chunk 27
f <- function(x, y=2){
z <- 5
(x + y) / z
}
# since we defined two arguments x and y, the function thinks the first one is x and the second one is y. You can overwrite y like this:
f(4, 4)
f(x = 4, y = 4) # produces the same result
ls() # objects defined in the function environment only exist inside the function; they are not found in the global environment!
# Chunk 28
z <- 5 # define z outside of the function environment
f <- function(x, y=2){
(x + y) / z
}
f(4, 4)
ls() # the function envrionment can indeed use objects defined in the global environment.
# Chunk 29
function_squared = function(x){
for(i in 1:x){
y <- i ^ 2
print(y)
}
}
function_squared(10)
# Chunk 30
# construct a dummy data frame
cylinders = data.frame(height = c(3,4,5,6,7),
radius = c(1,3,2,1,5))
cylinders
# write a function that computes the volume of these cylinders
# the two arguments are defined as the height and radius columns
cylinders_function = function(height, radius){
volume = pi * radius ^ 2 * height
print(volume)
}
str(cylinders)
# plug in height and radius
cylinders_function(height = cylinders$height, radius = cylinders$radius)
# Chunk 31
sample(1:6, 1)
# We can also use the sample function to simulate 100 die rolls...
sample(1:6, 100, replace=TRUE)
# Chunk 33
set.seed(1)
die_roll_mean <- function(nr_rolls){
rolls <- sample(1:6, nr_rolls, replace=TRUE)
mean(rolls)
}
die_roll_mean(nr_rolls = 100)
# Chunk 34
# 100 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 100))
# Chunk 36
# 5 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 5))
# Chunk 38
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
# Chunk 39
my_hist <- function(sims, n){
hist(sims, col="grey",  xlab="Mean of n die rolls",
main=paste0("n=",n), xlim=c(2,5))
abline(v=mean(sims), col="blue", lwd=2)
}
my_hist(sims=reps, n=5)
# Chunk 40
nr_die_rolls <- c(10, 25, 50, 100, 200, 500)
# Chunk 41
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
# Chunk 42
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 3
data(iris)
dim(iris)[1L]
nrow(iris)
dim(iris)[1L] == nrow(iris)
# Chunk 4
nrow_function <- function(x){
dim(x)[1L]
}
nrow_function(iris)
# Chunk 5
for(x in 1:10){
print(x)
}
# ?reserved
# Chunk 6
vec <- c(rep(NA, 10))
vec
# Chunk 7
for(i in 1:10){
vec[i] <- 2^(i)
}  # does indentation matter?
vec
class(vec)
# Chunk 8
for(i in 1:5){
vec[i] <- 3^i
}
vec
#This has changed only the first five entries of `vec`
# Chunk 9
animal.names <- c("Cat", "Dog", "Pig", "Elephant", "Giraffe")
animal.names
# Chunk 10
animals.length <- rep(NA, length(animal.names))
animals.length
# Chunk 11
names(animals.length) <- animal.names
animals.length  #See how we are building this from scratch?
# Chunk 12
for(i in animal.names){
animals.length[i] <- nchar(i)
}
animals.length
# Chunk 14
for(x in 1:10){
if(x < 5)
print(x)
}
# Chunk 15
for (time in c(12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)){
print(paste("The time is", time, "AM"))
}
for(i in 1:10){
print(i / 12)
}
# your code here
# Chunk 18
x <- 1:10
for (x in 1:length(x)){
if(x > 7){
print(x)
}else{
print("Error: number not big enough to print. x must be greater than 7")
}
}
#Super cool! :)
# Chunk 19
set.seed(1)
animal <- sample(c("cat", "dog"), 10, replace=TRUE)
animal
# Chunk 20
animal_sound <- ifelse(animal == "cat", "meow?", "WOOF!")
animal_sound
# Chunk 21
animals_int <- ifelse(animal_sound == "WOOF!", 0, 1)
animals_int
# Chunk 22
animal2 <- ifelse(animals_int == 1, "cat", "dog")
animal2
animal == animal2 # sanity checks
sum(animal != animal2)
# Chunk 23
# 1.
for(i in 1:12) # what happened to the curly braces?
if(i < 10){
print(paste("The time is", i, "o'clock"))
}else{
print("It is getting late!")
}
for(x in c(2,4,6,8,10,12))
if(x < 8){
print(paste("Whoa the number is", x))
}else{
print("nahhh...")
}
# your code here
# Chunk 24
test_function <- function(x){
x ^ 2
}
class(test_function)        # Returns the class of `test_function`
formals(test_function)      # Shows the defined arguments
body(test_function)         # Displays the statements to be evaluated
environment(test_function)  # Returns the "global" environment
test_function               # Shows your function as you have written it
# Chunk 25
test_function
test_function(2)
test_function(1:10) # is this the same as c(1:10) ^ 2?
# Chunk 26
f <- function(x, y=2){
(x + y) / y
}
f(x=5)
f(x=5, y=10)
# Chunk 27
f <- function(x, y=2){
z <- 5
(x + y) / z
}
# since we defined two arguments x and y, the function thinks the first one is x and the second one is y. You can overwrite y like this:
f(4, 4)
f(x = 4, y = 4) # produces the same result
ls() # objects defined in the function environment only exist inside the function; they are not found in the global environment!
# Chunk 28
z <- 5 # define z outside of the function environment
f <- function(x, y=2){
(x + y) / z
}
f(4, 4)
ls() # the function envrionment can indeed use objects defined in the global environment.
# Chunk 29
function_squared = function(x){
for(i in 1:x){
y <- i ^ 2
print(y)
}
}
function_squared(10)
# Chunk 30
# construct a dummy data frame
cylinders = data.frame(height = c(3,4,5,6,7),
radius = c(1,3,2,1,5))
cylinders
# write a function that computes the volume of these cylinders
# the two arguments are defined as the height and radius columns
cylinders_function = function(height, radius){
volume = pi * radius ^ 2 * height
print(volume)
}
str(cylinders)
# plug in height and radius
cylinders_function(height = cylinders$height, radius = cylinders$radius)
# Chunk 31
sample(1:6, 1)
# We can also use the sample function to simulate 100 die rolls...
sample(1:6, 100, replace=TRUE)
# Chunk 33
set.seed(1)
die_roll_mean <- function(nr_rolls){
rolls <- sample(1:6, nr_rolls, replace=TRUE)
mean(rolls)
}
die_roll_mean(nr_rolls = 100)
# Chunk 34
# 100 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 100))
# Chunk 36
# 5 roll mean
reps <- replicate(200, die_roll_mean(nr_rolls = 5))
# Chunk 38
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
# Chunk 39
my_hist <- function(sims, n){
hist(sims, col="grey",  xlab="Mean of n die rolls",
main=paste0("n=",n), xlim=c(2,5))
abline(v=mean(sims), col="blue", lwd=2)
}
my_hist(sims=reps, n=5)
# Chunk 40
nr_die_rolls <- c(10, 25, 50, 100, 200, 500)
# Chunk 41
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
# Chunk 42
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
# Chunk 43
set.seed(94705)
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
# Chunk 44
unique(birthdays)
length(unique(birthdays))
# Chunk 45
set.seed(94705)
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
# Chunk 46
set.seed(94705)
many_sims <- replicate(1000, birthday_function(people=25))
# Chunk 48
mean(many_sims)
# Chunk 49
people <- 2:100
sims <- matrix(NA, nrow = length(people), ncol = 2)
for(i in 1:length(people)){
many_sims <- replicate(5000, birthday_function(people=people[i]))
sims[i,] <- c(people[i], mean(many_sims))
}
head(sims)
sims
# Chunk 51
par(mfrow=c(1,1))
plot(x = sims[,1], y = sims[,2],
pch=16, col="blue",
xlab="Nr of People",
ylab="Probability of at Least One Match")
