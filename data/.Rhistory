data=data.frame(x=train22[,1], y=train22[,2], cls=cl))
which(is.na(train))
# Chunk 3
data(Boston)
head(Boston)
?Boston
str(Boston)
# Chunk 4
summary(Boston$dis)
Boston$dis <- cut(Boston$dis,
breaks=c(0, 3, 6, 13),
levels=c(1,2,3),
labels=c("short", "medium", "long"))
str(Boston)
head(Boston, 10)
Boston$dis
table(Boston$dis)
# Chunk 5
set.seed(1)
split <- createDataPartition(Boston$dis, p=0.70, list=FALSE)
train <- Boston[split, ]
test <- Boston[-split, ]
train_labels <- train[,8]
test_labels <- test[,8]
# Chunk 6
?knn # (click the option from the "class" library)
round(sqrt(nrow(train)),2) # 18.84
set.seed(1)
Boston_p <- knn(train=train[,-8], test=test[,-8], cl=train_labels, k=19, prob=TRUE)
# Chunk 7
CrossTable(x=test_labels, y=Boston_p,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
# Chunk 8
B <- Boston
B[,-8] <- round(scale(Boston[,-8], center=TRUE, scale=TRUE), 2)
head(B, 10)
# Chunk 9
set.seed(1)
split_Z <- createDataPartition(B$dis, p=0.70, list=FALSE)
train_Z <- B[split_Z, ]
test_Z <- B[-split_Z, ]
train_labels_Z <- train_Z[,8]
test_labels_Z <- test_Z[,8]
# Chunk 10
set.seed(1)
B_p <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=19, prob=TRUE)
CrossTable(x=test_labels_Z, y=B_p,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
# Chunk 11
set.seed(1)
B_p_k5 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=5) # k=5
B_p_k100 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=100) # k=100
CrossTable(x=test_labels_Z, y=B_p_k5,  # k=5
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k100,  # k=100
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
# Chunk 12
library(plyr)
Boston_plot_df <- data.frame(test, predicted=Boston_p)
head(Boston_plot_df)
pl
plot1 = data.frame(x = Boston_plot_df$medv,
y = Boston_plot_df$age,
predicted=Boston_plot_df$predicted)
convex_hull <- function(df) df[chull(df$x, df$y),]
boundary <- ddply(plot1, .variables="predicted", .fun=convex_hull)
ggplot(Boston_plot_df, aes(indus, age, color=predicted, fill=predicted)) +
geom_point() +
geom_polygon(data=boundary, aes(x,y), alpha=0.25) +
xlim(0,20)
Boston_plot_df <- data.frame(test, predicted=Boston_p)
head(Boston_plot_df)
accuracy[x] <- mean(prediction == Boston$distance[!train])
accuracy[x] <- mean(predicted == Boston$distance[!train])
boxplot(Boston)
boxplot(Boston, las=1)
boxplot(Boston, las=1)
boxplot(Boston, las=2)
loop_p <- knn(train=train[,-8], test=test[,-8], cl=train_labels, k=x, prob=TRUE),
accuracy[x] <- mean(Boston_p == train_labels)
plot(Boston_p)
Boston_p
hist(Boston_p)
class(Boston_p)
hist(as.numeric(Boston_p))
plot(as.numeric(Boston_p))
barplot(as.numeric(Boston_p))
attributes(.Last.value)
install.packages("mlr", dependencies = T)
library(mlr)
?plotLearnerPrediction
plotLearnerPrediction(Boston_p)
Boston_d <- dist(Boston)
Boston_numeric <- Boston
str(Boston_numeric)
Boston_numeric$dis <- as.numeric(Boston_numeric$dis)
str(Boston_numeric)
Boston_d <- dist(Boston_numeric)
Boston_d
c <- cmdscale(Boston_d, eig=TRUE, k=2)
c
plot(c$points[,1], c$points[,2], col=Boston$dis)
prob <- attr(Boston_p, "prob")
prob
class(prob)
barplot(prob)
require(dplyr)
dataf <- bind_rows(mutate(test,
prob=prob,
cls="short",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test,
prob=prob,
cls="medium",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test,
prob=prob,
cls="s",
prob_cls=ifelse(Boston_p==cls,
1, 0)))
dataf
dataf
require(ggplot2)
ggplot(dataf) +
geom_point(aes(x=x, y=y, col=cls),
data = mutate(test, cls=classif),
size=1.2) +
geom_contour(aes(x=x, y=y, z=prob_cls, group=cls, color=cls),
bins=2,
data=dataf) +
geom_point(aes(x=x, y=y, col=cls),
size=3,
data=data.frame(x=train[,1], y=train[,2], cls=cl))
seq(min(train[,1]-1)
)
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
test2
require(dplyr)
ggplot(dataf) +
geom_point(aes(x=x, y=y, col=cls),
data = mutate(test2, cls=Boston_p),
size=1.2) +
geom_contour(aes(x=x, y=y, z=prob_cls, group=cls, color=cls),
bins=2,
data=dataf) +
geom_point(aes(x=x, y=y, col=cls),
size=3,
data=data.frame(x=train2[,1], y=train2[,2], cls=cl))
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="short",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="medium",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="s",
prob_cls=ifelse(Boston_p==cls,
1, 0)))
nrow(dataf)
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="short",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="medium",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="s",
prob_cls=ifelse(Boston_p==cls,
1, 0)))
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="c",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="v",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="s",
prob_cls=ifelse(Boston_p==cls,
1, 0)))
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="short",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="medium",
prob_cls=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="long",
prob_cls=ifelse(Boston_p==cls,
1, 0)))
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="short",
prob_Distance=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="medium",
prob_Distance=ifelse(Boston_p==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="long",
prob_Distance=ifelse(Boston_p==cls,
1, 0)))
dataf <- bind_rows(mutate(test2,
prob=prob,
dis="short",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test2,
prob=prob,
dis="medium",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test2,
prob=prob,
dis="long",
prob_Distance=ifelse(Boston_p==dis,
1, 0)))
prob <- attr(Boston_p, "prob")
class(prob)
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
dataf <- bind_rows(mutate(test2,
prob=prob,
cls="c",
prob_cls=ifelse(classif==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="v",
prob_cls=ifelse(classif==cls,
1, 0)),
mutate(test2,
prob=prob,
cls="s",
prob_cls=ifelse(classif==cls,
1, 0)))
train
train[,1]
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
test2
dataf <- bind_rows(mutate(test2,
prob=prob,
Distance="short",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test2,
prob=prob,
cls="v",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test2,
prob=prob,
cls="s",
prob_Distance=ifelse(Boston_p==dis,
1, 0)))
Boston_p
Boston_p
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
nrow(test2)
dataf <- bind_rows(mutate(test,
prob=prob,
Distance="short",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test,
prob=prob,
cls="v",
prob_Distance=ifelse(Boston_p==dis,
1, 0)),
mutate(test,
prob=prob,
cls="s",
prob_Distance=ifelse(Boston_p==dis,
1, 0)))
ggplot(dataf) +
geom_point(aes(x=x, y=y, col=cls),
data = mutate(test, cls=classif),
size=1.2) +
geom_contour(aes(x=x, y=y, z=prob_cls, group=cls, color=cls),
bins=2,
data=dataf) +
geom_point(aes(x=x, y=y, col=cls),
size=3,
data=data.frame(x=train[,1], y=train[,2], cls=cl))
test2 <- expand.grid(x=seq(min(train[,1]-1), max(train[,1]+1),
by=0.1),
y=seq(min(train[,2]-1), max(train[,2]+1),
by=0.1))
head(test2)
d <- dist(test)
str(test)
test$dis <- factor(test$dis)
d <- dist(test)
test$dis <- as.numeric(test$dis)
d <- dist(test)
cmd <- cmdscale(d, eig=TRUE, k=2)
plot(cmd$points[,1], cmd$points[,2], col=Boston_p$dis)
plot(cmd$points[,1], cmd$points[,2])
B_p_k3 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=19, prob=TRUE)
B_p_k100 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=19, prob=TRUE)
CrossTable(x=test_labels_Z, y=B_p_k5,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
B_p_k3 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=19, prob=TRUE)
B_p_k100 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=19, prob=TRUE)
CrossTable(x=test_labels_Z, y=B_p_k3,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k100,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k3,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k100,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
B_p_k3 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=3, prob=TRUE)
B_p_k100 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=100, prob=TRUE)
CrossTable(x=test_labels_Z, y=B_p_k3,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k100,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
B_p_k2 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=2, prob=TRUE)
B_p_k100 <- knn(train=train_Z[,-8], test=test_Z[,-8], cl=train_labels_Z, k=100, prob=TRUE)
CrossTable(x=test_labels_Z, y=B_p_k2,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
CrossTable(x=test_labels_Z, y=B_p_k100,
prop.chisq=FALSE,
prop.r=FALSE,
prop.c=FALSE,
prop.t=FALSE)
setwd("/Users/evanmuzzall/Desktop/MachineLearningWG/MLWG_Spring2017/data")
read.csv("Boston.csv", header=TRUE, stringsAsFactors=FALSE)
read.csv("Boston.csv", header=TRUE, stringsAsFactors=FALSE)
read.csv("Boston.csv", header=TRUE, stringsAsFactors=FALSE)
setwd("/Users/evanmuzzall/Desktop/R-Fundamentals-master")
setwd("/Users/evanmuzzall/Desktop/R-Fundamentals")
setwd("/Users/evanmuzzall/Desktop/R-Fundamentals/data")
read.csv("animals.")
setwd("/Users/evanmuzzall/Desktop/R-Fundamentals/data")
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
sleep_VIM <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors=FALSE)
animals <- read.csv("animals.csv", header=TRUE, )
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
sleep_VIM <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors=FALSE)
sleep <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors=FALSE)
Location <- sample(c("A", "B", "C"), 20, replace=TRUE)
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"))
cbind_sleep <- cbind(sleep, sleep_ratios)
head(cbind_sleep)
str(cbind_sleep)
```
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE)
cbind_sleep <- cbind(sleep, sleep_ratios)
head(cbind_sleep)
str(cbind_sleep)
```
Site=sample(c("A", "B"), 20, replace=TRUE)
Site
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE))
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
str(cbind_animals)
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE),
stringsAsFactors=FALSE)
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
str(cbind_animals)
set.seed(1)
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE),
stringsAsFactors=FALSE)
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
str(cbind_animals)
Location <- data.frame(Type=sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE),
Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE),
stringsAsFactors=FALSE)
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
set.seed(1)
Location <- data.frame(Type=sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE),
Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE),
stringsAsFactors=FALSE)
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
Location <- data.frame(Site=sample(c("A", "B"), 20, replace=TRUE),
City=sample(c("San Francisco", "Oakland", "Berkeley"), 20, replace=TRUE),
stringsAsFactors=FALSE)
cbind_animals <- cbind(animals, Location)
head(cbind_animals)
str(cbind_animals)
df_A <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
df1 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
dfA <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
dfB <- data.frame(Name-c("James", "Cher", "Elizabeth", "Barack"),
City=c("Cleveland", "Memphis", "Detroit", "Chicago"),
Math=c(44, 49, 50, 49),
Reading=c(9, 9, 9, 10))
dfB <- data.frame(Name=c("James", "Cher", "Elizabeth", "Barack"),
City=c("Cleveland", "Memphis", "Detroit", "Chicago"),
Math=c(44, 49, 50, 49),
Reading=c(9, 9, 9, 10))
df_rbind <- rbind(dfA, dfB)
df_rbind
df1 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
df1_a <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
Science=c(99, 100, 99, 100))
df_merge <- merge(df1, df1_a)
df_merge
df1 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
df1_a <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
Science=c(99, 100, 99, 100))
df_merge <- merge(df1, df1_a, by="Name")
df_merge
getwd()
