?merge #Click the "Merge two data frames" link
df1 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
City=c("Berkeley", "Berkeley", "Oakland", "Oakland"),
Math=c(42, 48, 50, 46),
Reading=c(8, 10, 10, 10))
df1
df2 <- data.frame(Name=c("Joe", "Susan", "Jack", "Kelly"),
Science=c(99, 100, 99, 100),
Music=c(19, 18, 20, 20),
Art=c(20, 20, 19, 18))
df2
df_merge <- merge(df1, df2, by="Name")
df_merge
?cbind
?rbind # Click the "Combine R Objects by Rows or Columns" link
df_merge
df1
df3 <- data.frame(Name=c("Heather", "Billy", "Hector", "Jane"),
City=c("San Francisco", "Los Angeles", "San Francisco", "Chico"),
Math=c(49, 44),
Reading=c(10,10))
df3
df_cbind <- cbind(df1, df3)
df_cbind
df1
dfB <- data.frame(Name=c("James", "Cher", "Elizabeth", "Barack"),
City=c("Cleveland", "Memphis", "Detroit", "Chicago"),
Math=c(44, 49, 50, 49),
Reading=c(9, 9, 9, 10))
df_rbind <- rbind(dfA, dfB)
df1
dfB <- data.frame(Name=c("James", "Cher", "Elizabeth", "Barack"),
City=c("Cleveland", "Memphis", "Detroit", "Chicago"),
Math=c(44, 49, 50, 49),
Reading=c(9, 9, 9, 10))
df_rbind <- rbind(df1, dfB)
df_rbind
library(reshape2)
library(reshape2)
head(animals)
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
?t
mat1 <- matrix(1:10, nrow=5, ncol=2)
mat1
mat1_t <- t(mat1)
mat1_t
animals_t <- t(animals)
animals_t
?t
mat1 <- matrix(1:10, nrow=5, ncol=2)
mat1
mat1_t <- t(mat1)
mat1_t
animals_t <- t(animals)
animals_t
head(animals)
?melt
?dcast
animals_melt <- melt(animals, id="Type")
str(animals_melt)
animals_melt
type_means <- dcast(animals_melt, Type~variable, mean)
type_means
type_sd <- dcast(animals_melt, Type~variable, sd)
type_sd
getwd()
setwd("/Users/evanmuzzall/Desktop/R-Fundamentals/data")
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
head(animals)
animals
?summary
summary(animals)
summary(animals$Height)
library(psych)
?describe
str(animals)
describe(animals[,c(3:5)])
animals_describe <- describe(animals[,c(3:5)])
animals_describe
animals_simple <- animals_describe[c(5, 4, 11:13)]
animals_simple
write.csv(animals_simple, "animals_simple.csv", row.names=TRUE)
?describeBy
summary_sub <- describeBy(animals[,c(3:5)], animals$Type)
summary_sub
summary_sub$Cat
summary_sub$Dog
summary_sub$Pig
summary_sub$Dog[[3]] #Here, double bracket subsetting is used to return just the value from a list.
summary_sub$Dog[[3]][2]
summary_sub$Pig[[5]]
summary_sub$Pig[["median"]]
?table
table(animals$Type) # get frequencies for Cat, Dog, and Pig
table(animals$Type, animals$Healthy) #get frequencies for Cat, Dog, and Pig by column "Healthy".
?hist
hist(animals$Weight, col="violetred")
colors()
hist(animals$Weight,
col="violetred",
main="Histogram of animal weight",
xlab="Animal weight",
las=1)
?plot
animals$Type <- factor(animals$Type)
str(animals)
animals$Weight
animals$Height
plot(animals$Weight, animals$Height,
xlab="Weight (kg)",   # change x axis label
ylab="Height (cm)",   # change y axis label
main="Animal weights and heights",   # add plot title
las=1, # make all axis text parallel to x-axis
col=as.integer(animals$Type),   # change point colors to correspond to animal types
pch=as.integer(animals$Type),   # change point symbols to correspond to animal types
cex=2)   # change point size
plot(animals$Weight, animals$Height,
xlab="Weight (kg)",   # change x axis label
ylab="Height (cm)",   # change y axis label
main="Animal weights and heights",   # add plot title
las=1, # make all axis text parallel to x-axis
col=as.integer(animals$Type),   # change point colors to match animal types
pch=as.integer(animals$Type),   # change point symbols to match animal types
cex=2,   # change point size
xlim=c(3,8),  # adjust range of x axis
ylim=c(4,11))  # adjust range of y axis
legend("topright", inset=.0, title="Animal", cex=1,
c("Cat","Dog","Pig"), col=c(1,2,3), pch=c(1,2,3),
horiz=FALSE)
?png
png("Animal weights and heights.png", height=6, width=6, units="in", res=300)
plot(animals$Weight, animals$Height,
xlab="Weight (kg)", ylab="Height (cm)",
main="Animal weights and heights", las=1,
col=as.integer(animals$Type), pch=as.integer(animals$Type),
cex=2, xlim=c(3,8), ylim=c(3,11))
legend("topright", inset=.0, title="Animal", cex=1,
c("Cat","Dog","Pig"), col=c(1,2,3), pch=c(1,2,3),
horiz=FALSE)
dev.off()
?boxplot
boxplot(animals$Height ~ animals$Type)
boxplot(animals$Height ~ animals$Type,
col=c("aquamarine", "goldenrod", "salmon"),
las=1, main="Animal boxplots", xlab="Type", ylab="Height")
?pdf
pdf("animals boxplot.pdf", 6, 6)
boxplot(animals$Height ~ animals$Type,
col=c("aquamarine", "goldenrod", "salmon"),
las=1, main="Animal boxplots", xlab="Type", ylab="Height")
dev.off()
Cat <- animals[animals$Type=="Cat",]
Cat
Dog <- animals[animals$Type=="Dog",]
Dog
Pig <- animals[animals$Type=="Pig",]
?t.test
t.test(Cat$Height, Pig$Height)
t.test(Cat$Height, Dog$Height)
?aov
?TukeyHSD
?aov
aov1 <- aov(Height ~ Type, data = animals)
summary(aov1)
TukeyHSD(aov1)
?cor.test
cor.test(Cat$Height, Cat$Weight)
?lm
lin.model1 <- lm(Height ~ Weight, data=Cat)
summary(lin.model1)
names(lin.model1)
lin.model1$residuals
hist(lin.model1$residuals, col="skyblue") # residuals should be approximately normal when plotted
?ggplot
?ggplot
library(ggplot2)
mtcars$cyl <- factor(mtcars$cyl) # first, coerce "cyl" to factor data type
ggplot(mtcars, aes(x=cyl, y=mpg, fill=cyl)) +
geom_boxplot()
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() + theme(legend.position="top")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
theme(legend.position="top") +
theme_bw()
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
theme_bw() +
theme(legend.position="top")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
theme(legend.position="top")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
theme_light() +
theme(legend.position="top")
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
theme(legend.position="top")
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
#theme_dark() +
#theme_classic() +
#theme_bw +
theme(legend.position="top")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
theme_dark() +
#theme_classic() +
#theme_bw +
theme(legend.position="top")
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
#theme_dark() +
theme_classic() +
#theme_bw +
theme(legend.position="top")
?Ggplot
?gglot
?ggplot
data(iris)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width, color=Species)) +
geom_point() +
#theme_light() +
#theme_dark() +
#theme_classic() +
#theme_bw +
theme(legend.position="top")
getwd()
sleep <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors = FALSE)
nrow
nrow(sleep)
getwd()
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
sleep <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors = FALSE)
sleep <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors = FALSE)
rm(list=ls())
sleep <- read.csv("sleep_VIM.csv", header=TRUE, stringsAsFactors = FALSE)
animals <- read.csv("animals.csv", header=TRUE, stringsAsFactors=FALSE)
str(animals)
?rep
?"for"
?"in"
vec <- c(rep(NA, 10))
vec
for(i in 1:10){
vec[i] <- 2^(i)
}
vec
class(vec)
for(i in 1:5){
vec[i] <- 3^i
}
vec
animal.names <- c("Cat", "Dog", "Pig", "Elephant", "Giraffe")
animal.names
animal.names <- c("Cat", "Dog", "Pig", "Elephant", "Giraffe")
animal.names
animals.length <- rep(NA, length(animal.names))
animals.length
names(animals.length) <- animal.names
animals.length  #See how we are building this from scratch?
?nchar
for(i in animal.names){
animals.length[i] <- nchar(i)
}
animals.length
for(i in 1:100){
print(i)
}
?break
my_nums <- 40:70
for(i in 1:length(my_nums)){
print(my_nums[i])
if(my_nums[i] == 50) break
}
my_nums[15] <-  as.numeric(NA)
my_nums
my_nums[15] <-  as.numeric(NA)
my_nums
?stopifnot
for(i in 1:length(my_nums)){
print(my_nums[i])
stopifnot(!is.na(my_nums[i]))
}
for(i in 1:length(my_nums)){
stopifnot(!is.na(my_nums[i])
print(my_nums[i]))
}
for(i in 1:length(my_nums)){
stopifnot(!is.na(my_nums[i])
print(my_nums[i])
}
```
for(i in 1:length(my_nums)){
print(my_nums[i])
stopifnot(!is.na(my_nums[i]))
}
for(i in 1:length(my_nums)){
stopifnot(!is.na(my_nums[i])
print(my_nums[i])
)
}
for(i in 1:length(my_nums)){
print(my_nums[i])
stopifnot(!is.na(my_nums[i]))
}
x <- 7
if(x > 7){
print(x)
}else{   #`else` should not start its own line. Always let it be preceded by a closing brace on the same line.
print("NOT BIG ENOUGH!!")
}
x <- 1:10
for (i in 1:10){
if(x[i] > 7){
print(x[i])
}else{
print("NOT BIG ENOUGH!!")
}
}
x <- 1:10
for (i in 1:10){
if(x[i] > 7){
print(x[i])
}else{
print("NOT BIG ENOUGH!!")
}
}
set.seed(1)
animal <- sample(c("cat", "dog"), 10, replace=TRUE)
animal
animal <- ifelse(animal=="cat", 1, 0)
animal
animal <- ifelse(animal==1, "meow!?", "WOOF")
animal
animal <- ifelse(animal=="meow!?", TRUE, FALSE)
animal
test_function <- function(x){
x + 1
}
class(test_function)        # Returns the class of `test_function`
formals(test_function)      # Shows the defined arguments
body(test_function)         # Displays the statements to be evaluated
environment(test_function)  # Returns the "global" environment
test_function               # Shows your function as you have written it
test_function(2)
f <- function(x, y=2){
(x + y) / y
}
f(5)
f(4, 4) # here, we do not need to specify `x` and `y` because R knows that the second argument is "y"
f(4, y=4) # this is the same as f(4, 4)
f(y=4, 4)
f <- function(x, y=2){
z <- 5
(x + y) / z
}
f(4, 4)
ls()
z <- 5 # define z outside of the function environment
f <- function(x, y=2){
(x + y) / z
}
f(4, 4)
ls()
f <- function(x) {
y <- 1
g <- function (x) {
x + y
}
g(x)
}
f(1)
f <- function(x) {
if (x>5) {return("ERROR")}
y <- 4
g <- function (x) {
x + y
}
g(x)
}
f(x=1)
f(x=10)
in_to_cm <- function(x){
x * 2.5
}
in_to_cm(74)
function(x){
x * 2.5 / 100
}
in_to_m <- function(x){
in_to_cm(x) / 100
}
in_to_m(74)
in_to_cm <- function(x){
x * 2.54
}
in_to_m(74)
74 == c(74)
height.vec <- c(74,64,73,82)
in_to_m(height.vec)
height.list <- list(74,64,73,82)
in_to_m(height.list)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 1)
sample(1:6, 100, replace=TRUE)
iter <- 200
nr_rolls <- 100
for (i in 1:iter){
rolls <- sample(1:6, nr_rolls, replace=TRUE)
#print(rolls)
print(mean(rolls))
}
die_roll_mean <- function(nr_rolls){
rolls <- sample(1:6, nr_rolls, replace=TRUE)
mean(rolls)
}
die_roll_mean(nr_rolls = 100)
reps <- replicate(200, die_roll_mean(nr_rolls = 100))
reps
reps <- replicate(200, die_roll_mean(nr_rolls = 5))
reps
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
hist(reps)
hist(reps, col="grey")
abline(v=mean(reps), col="blue", lwd=6)
my_hist <- function(sims){
hist(sims, col="grey", xlab="Mean of n die rolls", main="")
abline(v=mean(sims), col="blue", lwd=6)
}
my_hist(sims=reps)
my_hist(sims=reps)
my_hist <- function(sims, n){
hist(sims, col="grey",  xlab="Mean of n die rolls",
main=paste0("n=",n), xlim=c(2,5))
abline(v=mean(sims), col="blue", lwd=2)
}
my_hist(sims=reps, n=5)
nr_die_rolls <- c(10, 25, 50, 100, 200, 500)
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[1]))
my_hist(sims=reps, n=nr_die_rolls[1])
par(mfrow=c(2,3))
for (i in 1:length(nr_die_rolls)){
reps <- replicate(1000, die_roll_mean(nr_rolls = nr_die_rolls[i]))
my_hist(sims=reps, n=nr_die_rolls[i])
}
set.seed(94705)
birthdays <- sample(1:365, 25, replace=TRUE)
birthdays
unique(birthdays)
length(unique(birthdays))
set.seed(94705)
birthday_function <- function(people=25){
# we populate the room
birthdays <- sample(1:365, people, replace=TRUE)
# get the unique number of bdays
unique_bdays <- length(unique(birthdays))
# and return a 1 if at least one bday is repeated.
as.numeric(unique_bdays!=people)
}
birthday_function(people=25)
set.seed(94705)
many_sims <- replicate(1000, birthday_function(people=25))
many_sims
mean(many_sims)
people <- 4:100
sims <- matrix(NA, length(people), 2)
for(i in 1:length(people)){
many_sims <- replicate(5000, birthday_function(people=people[i]))
sims[i,] <- c(people[i], mean(many_sims))
}
head(sims)
par(mfrow=c(1,1))
plot(sims[,1], sims[,2], pch=16, col="blue",
xlab="Nr of People", ylab="Probability of at Least One Match")
sims
par(mfrow=c(1,1))
plot(sims[,1], sims[,2], pch=16, col="blue",
xlab="Nr of People", ylab="Probability of at Least One Match")
