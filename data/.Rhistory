describe(animals[ , c("Weight", "Height", "Progress")])
animals_summary <- describe(animals[ , c("Weight", "Height", "Progress")])
animals_summary
# How do I subset this to only include: n, median, mean, and sd (in this order?)
animals_small <- animals_summary[ , c("n","median","mean","sd")]
animals_small
colnames(animals_summary)
animals_small2 <- animals_summary[ , c(2, 5, 3, 4)]
animals_small2
animals_summary <- describe(animals[ , c("Weight", "Height", "Progress")])
animals_summary
hist(animals$Height,
col = "orange",
xlab = "Height (cm)",
main = "title goes here!",
breaks = 20)
hist(animals$Height,
col = "orange",
xlab = "Height (cm)",
main = "title goes here!",
breaks = 2)
hist(animals$Height,
col = "orange",
xlab = "Height (cm)",
main = "title goes here!",
breaks = 20)
animals_small
write.csv(animals_small,
file = "animals_small.csv",
row.names = FALSE)
write.csv(animals_small,
file = "animals_small.csv",
row.names = T)
write.csv(animals_small,
file = "animals_small.csv",
row.names = FALSE)
getwd()
write.csv(animals_small,
file = "animals_small.csv",
row.names = TRUE)
animals_summary
# describeBy let's you add a grouping variable!
describeBy(animals[ , 3:5], group = animals$Type)
# describeBy let's you add a grouping variable!
animals_descBy <- describeBy(animals[ , 3:5], group = animals$Type)
animals_descBy
animals_descBy
# What if I just want descriptives for "Dog"?
animals_descBy$Dog
animals_descBy$Dog["mean"]
animals_descBy$Dog[c("mean", "sd")]
animals_descBy$Dog[, c("mean", "sd")]
animals_descBy$Dog[ , c("mean", "sd")]
# table and prop.table
?table
table(animals$Type)
table(animals$Type, animals$Healthy)
# Break/challenge time! (reconvene at 2:34)
# 1) load the iris dataset
data()
# Break/challenge time! (reconvene at 2:34)
# 1) load the iris dataset
data(iris)
str(iris)
?(iris)
# 2) run summary, describe, describeBy, and table on these data
summary(iris)
# 2) run summary, describe, describeBy, and table on these data
summary(iris)
describe(iris)
str(iris)
describe(iris)
describeBy(iris, group = iris$Speices)
describeBy(iris, group = iris$Species)
# 3) create a histogram and boxplots for these data
# 4) how do you find out how to create a scatterplot?
?plot
str(iris)
str(iris)
plot(x = iris$Petal.Length, y = iris$Petal.Width)
plot(x = iris$Petal.Length, y = iris$Petal.Width)
# 3) create a histogram and boxplots for these data
hist(iris$Sepal.Length)
# 3) create a histogram and boxplots for these data
hist(iris$Sepal.Length, col = "teal")
# 3) create a histogram and boxplots for these data
hist(iris$Sepal.Length, col = "turquoise")
boxplot(iris$Sepal.Length)
boxplot(iris$Sepal.Length ~ iris$Species)
boxplot(iris$Sepal.Length ~ iris$Species,
col = "blue")
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("goldenrod", "salmon", "turquoise"))
colors()
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("gray0", "gray 50", "gray100"))
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("gray20", "gray 50", "gray80"))
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("gray30", "gray 50", "gray80"))
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("gray40", "gray 50", "gray80"))
boxplot(iris$Sepal.Length ~ iris$Species,
col = c("gray40", "gray 60", "gray80"))
colors()
boxplot(iris$Sepal.Length ~ iris$Species,
#col = c("gray40", "gray 60", "gray80"))
col = c("blue", "orange", "green"))
library(ggplot2)
?ggplot
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length))
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40)
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title")
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)")
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.5))
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 1))
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274))
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length, color = "blue")) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 40) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 4) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length, color = "blue")) +
geom_histogram(bins = 30) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "blue") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "red") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "red", fill = "red") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "black", fill = "red") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, fill = "red") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "black", fill = "red") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30) +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, fill = "orange") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, color = "orange") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - histogram
ggplot(data = iris, aes(x = Petal.Length)) +
geom_histogram(bins = 30, fill = "orange", color = "blue") +
ggtitle("This is now a title") +
xlab("Petal Length (centimeters)") +
theme(plot.title = element_text(hjust = 0.6274)) +
theme_bw()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length))
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length)) +
geom_boxplot()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length)) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length)) +
geom_boxplot(color = Species) +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length)) +
geom_boxplot(color = Species) +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, color = Species)) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species, color = Species)) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species, color = "purple")) +
geom_boxplot() +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "purple") +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F)
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width)) +
geom_point()
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width)) +
geom_point(color = Species)
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = T)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
theme(legend.position="top")
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
# guides(fill = F) +
theme(legend.position="top")
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="top")
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="top")
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="top")
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme_bw() +
theme(legend.position="top")
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="top")
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F) +
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="bottom")
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="bottom")
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="left")
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="top")
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="right")
# ggplot2 - scatterplot
ggplot(iris, aes(x = Petal.Length , y = Petal.Width, color = Species)) +
geom_point() +
theme(legend.position="right") +
theme_classic()
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
geom_point() +
theme_minimal() +
guides(fill = F)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_point() +
geom_boxplot(color = "black") +
theme_minimal() +
guides(fill = F)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
geom_point() +
theme_minimal() +
guides(fill = F)
# ggplot2 - boxplots
ggplot(data = iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot(color = "black") +
geom_point(color = "blue") +
theme_minimal() +
guides(fill = F)
# first, subset the three species of iris flower into their own objects: "setosa" contains only setosa, "versicolor" contains only versicolor, and "virginica" contains only virginica flowers
setosa = iris[iris$Species == "setosa" , ]
versicolor = iris[iris$Species == "versicolor" , ]
virginica = iris[iris$Species == "virginica" , ]
# t-test - compare mean variation between ONE OR TWO GROUPS!
?t.test
t.test(setosa$Petal.Length, versicolor$Petal.Length)
describe(iris)
animals
aov_1 = aov(Weight ~ Type, data = animals)
aov_1 = aov(Weight ~ Type, data = animals)
aov_1 = aov(animals$Weight ~ animals$Type)
summary(aov_1)
t.test(versicolor$Petal.Length, virginica$Petal.Length)
summary(aov_1)
# Tukey test for Honest Significant Differences
?TukeyHSD
TukeyHSD(aov_1)
cor.test(animals$Height, animals$Weight)
# simple linear regression - can one variable be used to predict another?
?lm
# syntax = Y ~ X
# "regress Y onto X" (this sounds complicated)
# or, "can I use X to predict Y"?
# X = independent variable; input, predictor
# Y = dependent variable; response, target, outcome
lin_model1 = lm(Height ~ Weight, data = animals)
# syntax = Y ~ X
# "regress Y onto X" (this sounds complicated)
# or, "can I use X to predict Y"?
# X = independent variable; input, predictor
# Y = dependent variable; response, target, outcome
lin_model1 = lm(Height ~ Weight, data = animals)
summary(lin_model1)
names(lin_model1)
lin_model1$coefficients
summary(lin_model1)
install.package("models")
install.packages("models")
install.packages("models", type = "source")
library(models)
?AIC
AIC(lin_model1)
summary(lin_model1)
library(rJava)
library(rJava)
